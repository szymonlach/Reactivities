{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivitiesListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["PaginationResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateError","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","edit","attend","Account","login","user","register","currentUser","Profiles","getProfile","username","editProfile","profile","updateFollowing","listFollowings","predicate","getProfileActivities","Photos","uploadPhoto","photo","formData","FormData","append","setMainPhoto","deletePhoto","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","runInAction","setActivity","setPagination","console","log","setLoadingInitial","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","profileActivities","loadingActivities","setActiveTab","loadProfile","setDisplayName","responsePhoto","photos","isMain","setImage","activityStore","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","GridColumn","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","validationShema","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","LoadingComponent","Dimmer","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","Column","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","editProfileMode","setEditProfileMode","Tab","Pane","isCurrentUser","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dropzoneStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","file","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","followingCount","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.ff10a910.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginationResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { Activity, ActivityFormValues } from '../models/activity'\r\nimport { history } from '../..'\r\nimport { toast } from 'react-toastify'\r\nimport { store } from '../stores/store'\r\nimport { User, UserFormValues } from '../models/user'\r\nimport { Photo, Profile, ProfileActivities } from '../models/profile'\r\nimport { PaginationResult } from '../models/pagination'\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginationResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginationResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateError = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key])\r\n                        modalStateError.push(data.errors[key]);\r\n                }\r\n                throw modalStateError.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('Unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: any) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: any) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginationResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    edit: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    currentUser: () => requests.get<User>('/account')\r\n}\r\n\r\nconst Profiles = {\r\n    getProfile: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    editProfile: (profile: Partial<Profile>) => requests.put<void>('/profiles', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    getProfileActivities: (username: string, predicate: string) => requests.get<ProfileActivities[]>(`profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst Photos = {\r\n    uploadPhoto: (photo: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', photo);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post<void>(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del<void>(`photos/${id}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n    Photos\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface ProfileActivities{\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { throwStatement } from \"@babel/types\";\r\nimport { th } from \"date-fns/locale\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', true);\r\n        }\r\n\r\n        this.predicate.set(predicate, value);\r\n    }\r\n    \r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            runInAction(() => {\r\n                result.data.forEach(activity => {\r\n                    this.setActivity(activity);\r\n                })\r\n                this.setPagination(result.pagination);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.setLoadingInitial(false))\r\n\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.edit(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, ProfileActivities } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    profileActivities: ProfileActivities[] = [];\r\n    loadingActivities = false;\r\n\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) { return store.userStore.user.username === this.profile.username; }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.getProfile(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.loadingProfile = false; })\r\n        }\r\n    }\r\n\r\n    editProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.editProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (photo: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Photos.uploadPhoto(photo);\r\n            const responsePhoto = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(responsePhoto);\r\n                    if (responsePhoto.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(responsePhoto.url);\r\n                        this.profile.image = responsePhoto.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.uploading = false; })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Photos.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            store.activityStore.activityRegistry.forEach(activity => {\r\n                if (activity.host?.username === this.profile?.username) {\r\n                    activity.host!.image = photo.url;\r\n                }\r\n                activity.attendees.forEach(attendee => {\r\n                    if (attendee.username === this.profile?.username) {\r\n                        attendee.image = photo.url;\r\n                    }\r\n                })\r\n            })\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(x => x.isMain)!.isMain = false;\r\n                    this.profile.photos.find(x => x.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Photos.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(x => x.id !== photo.id);\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                }\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingFollowings = false)\r\n        }\r\n    }\r\n\r\n    loadActivities = async (predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const profileActivities = await agent.Profiles.getProfileActivities(this.profile!.username, predicate!);\r\n            runInAction(() => this.profileActivities = profileActivities);\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loadingActivities = false)\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.currentUser();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) this.user.displayName = displayName;\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n\r\n    error: ServerError | null = null\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createAt = new Date(comment.createAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createAt = new Date(comment.createAt);\r\n                    this.comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stoping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n\r\n    const { profileStore: { updateFollowing, loading }, userStore } = useStore();\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal' content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button fluid basic color={profile.following ? 'red' : 'green'} content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading} onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\nexport default observer(function ActivitiesListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivitiesListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activites'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')} />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date : Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, GridColumn, Loader } from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport InfiniteScroll from \"react-infinite-scroller\"\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </GridColumn>\r\n            <GridColumn width='6'>\r\n                <ActivityFilters />\r\n            </GridColumn>\r\n            <GridColumn width='10'>\r\n                <Loader active={loadingNext} />\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                        </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                        </Button>\r\n                        </>\r\n\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e,d)=>helpers.setValue(d.value)}\r\n                onBlur={()=>helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker'\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form, } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationShema = Yup.object({\r\n        title: Yup.string().required('Activity title is required'),\r\n        category: Yup.string().required(),\r\n        description: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) activityStore.loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\r\n    }, [id, activityStore.loadActivity, activityStore])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            activityStore.createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else {\r\n            activityStore.updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Segment className='ui form' clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationShema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form onSubmit={handleSubmit} autoComplete='auto'>\r\n                        <MyTextInput placeholder='Title' name='title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                        onSubmit={(values, { resetForm }) =>\r\n                            commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{ position: 'relative' }}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea\r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'abbsolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={activityStore.cancelActivityToggle}\r\n                            loading={activityStore.loading}\r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            to={`/manage/${activity.id}`}\r\n                            disabled={activity.isCancelled}\r\n                            color='orange'\r\n                            floated='right'\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n\r\n                    </>) : activity.isGoing ? (\r\n                        <Button loading={activityStore.loading} onClick={activityStore.updateAttendance}>Cancel attendance</Button>\r\n                    ) : (\r\n                    <Button disabled={activity.isCancelled} loading={activityStore.loading} onClick={activityStore.updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}) ","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity } = activityStore;\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) activityStore.loadActivity(id);\r\n        return () => activityStore.clearSelectedActivity();\r\n    }, [id, activityStore.loadActivity, activityStore])\r\n\r\n    if (activityStore.loadingInitial || !activityStore.selectedActivity) return <LoadingComponent />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={selectedActivity!} />\r\n                <ActivityDetailedInfo activity={selectedActivity!} />\r\n                <ActivityDetailedChat activityId={selectedActivity!.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={selectedActivity!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\nexport default function TestErrors() {\r\n\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    console.log(commonStore.error?.message);\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>}\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik, Form } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode, profile }: Props) {\r\n\r\n    const { profileStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: profile.displayName, bio: profile.bio }}\r\n            onSubmit={values => profileStore.editProfile(values).then(() => {\r\n                setEditMode(false);\r\n            })}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit}>\r\n                    <MyTextInput name='displayName' placeholder='Edit your display name' />\r\n                    <MyTextArea rows={3} placeholder='Edit your Bio' name='bio' />\r\n                    <Button positive loading={isSubmitting} content='Save changes' type='submit' floated='right' disabled={!isValid || !dirty} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileAbout({ profile }: Props) {\r\n\r\n    const { profileStore } = useStore();\r\n    const [editProfileMode, setEditProfileMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile.displayName}`} />\r\n                    {profileStore.isCurrentUser &&\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={editProfileMode ? 'Cancel' : 'Edit profile'}\r\n                            onClick={() => setEditProfileMode(!editProfileMode)}\r\n                        />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editProfileMode ? (\r\n                        <ProfileEditForm setEditMode={setEditProfileMode} profile={profile} />\r\n                    ) : (\r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile.bio}</span>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport { ProfileActivities } from '../../app/models/profile';\r\n\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n\r\n    const { profileStore: { loadingActivities, loadActivities, profileActivities } } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadActivities();\r\n    }, [loadActivities])\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadActivities(panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {profileActivities.map((activity: ProfileActivities) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n\r\n    const { profileStore: { profile, followings, loadingFollowings, activeTab } } = useStore();\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dropzoneStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dropzoneActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop image here'/>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    uploadPhoto: (photo: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ uploadPhoto, loading }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 &&\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(photo: Blob) {\r\n        uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser &&\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser &&\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button basic color='green' content='Main' name={'main' + photo.id} disabled={photo.isMain} loading={'main' + target === photo.id && loading} onClick={e => handleSetMainPhoto(photo, e)} />\r\n                                            <Button basic color='red' icon='trash' disabled={photo.isMain} loading={target === photo.id && loading} onClick={e => handleDeletePhoto(photo, e)} />\r\n                                        </Button.Group>\r\n                                    }\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout profile={profile} /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile?.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile?.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore: {loadingProfile, loadProfile, profile, setActiveTab} } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any> | React.ComponentType<any>>\r\n}\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modal/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <Route path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/styles.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport {  Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history'\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nexport const history =  createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}